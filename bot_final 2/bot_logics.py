from save_data import *
from markups import *
import telebot
from telebot import types
import random
from apscheduler.schedulers.background import BackgroundScheduler

#—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
token = data.get_data_from_txt("token.txt")["token"]
tasks = data.get_data_from_txt("tasks.txt")
names = data.get_data_from_txt("names.txt")
#—Å–ø–∏—Å–∫–∏ –Ω–∞–∑–∞–≤–Ω–∏–π –∫–æ—Ä–æ–±–æ–∫ –∏ –∏—Ö –Ω–∞–∑–∞–Ω–∏–∏–π –≤ —Å–ø–∏—Å–∫–µ tasks
dict_from_markap_to_key_task = {"–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":"tasks for the day","–ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é":"tasks for the week","–ü—Ä–æ–µ–∫—Ç—ã":"projects","–ö–æ—Ä–∑–∏–Ω–∞":"basket","–ì–æ—Ç–æ–≤–æ":"done","–ü–æ—Ç–æ–º":"later", "TODO":"TODO"}
dict_key_task_to_markap = {"tasks for the day":"–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è","tasks for the week":"–ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é","projects":"–ü—Ä–æ–µ–∫—Ç—ã","basket":"–ö–æ—Ä–∑–∏–Ω–∞","done":"–ì–æ—Ç–æ–≤–æ","later":"–ü–æ—Ç–æ–º", "TODO":"TODO"}
#—Å–ø–∏—Å–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –∏—Ö –¥–ª–∏–Ω—ã
ls_stickers_motv = ["CAACAgIAAxkBAAENFFtnKya-Ol73bU-e6FeFvHR_2fXsNwACKlQAAni74Ukz4YY0Fcgi7zYE", "CAACAgIAAxkBAAENFVNnLLQ9kj3LnHiXwjdE2_e4WSPrUAAC9U4AAoYjgEh_p9O9NH2kUTYE"]
len_ls_stickers_motv = len(ls_stickers_motv) - 1
ls_stickers = ["CAACAgIAAxkBAAENJIhnOiJ--BMj3HebjhzZZ9FcuKS_OQACWUIAAjfs6Uh_HZZzeWE60TYE", "CAACAgIAAxkBAAENJIZnOiJ2dyY9mUlCg2ZXCAW3j-CvvgACv0QAAiC4UEu7TjASIXBQyTYE", "CAACAgIAAxkBAAENJIRnOiJu5jq9p8gM8oVNfdHBCj5aUAACLDQAAtB4WEuNzxS2xQABY7w2BA", "CAACAgIAAxkBAAENJIBnOh-xYB_gmayc5K9VgqbVAAGbuuoAAkFZAAJxCLlJBhcQZoXbDvQ2BA", "CAACAgIAAxkBAAENJHFnOh3kgPgqWca-cfyAqwd6LsG95QACjRgAAgQOUUmoCZil16lX3DYE", "CAACAgIAAxkBAAENJG1nOh2rlZmbMbsWmKOjwy2p4jgUXQACtBUAAtIFyEvEgZTnl4Z7azYE", "CAACAgIAAxkBAAENJGtnOh2pFWJZyqevZDzlP5RttHl0WAACXxYAAgq6yUsjtyMt_mlHPjYE", "CAACAgIAAxkBAAENJGlnOh2BcMZU6iFlwatPxw6bz5VTVAACL0UAAlodQUhg9_z4F5aFHTYE", "CAACAgIAAxkBAAENJGdnOh15tzAkr91ahIJEKp-q_JLDrQACpzwAAjULyUv9CJLnbFrcljYE", "CAACAgIAAxkBAAENJGVnOh1iJQO7vVGNvBvHVsvB_kbdGwAC5DkAAhe_yUtoklwSU0XmKzYE", "CAACAgIAAxkBAAENJGNnOh1dqUSb58foIDw3-gdIjdaLFgACsj0AAkotwEvwKHztiZMfXjYE", "CAACAgIAAxkBAAENJGFnOh1P3QYD1CXES3suSpkYp9IDpQACZj4AAmWpKEjLdU768OjDFjYE"]
len_ls_stickers = len(ls_stickers) - 1

class tg_bot():
    def __init__(self):
        #—Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
        self.bot_ = telebot.TeleBot(token)
        #–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        #self.bot_.infinity_polling()
    
        
    def alert(self):
        """–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        for i in names:
            if len(tasks[i]["tasks for the week"]) == 0:
                self.bot_.send_message(i, f"–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–¥–∞—á –≤ –ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é. –°—Ç–æ–∏—Ç –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å.")
                continue
            msg = "" 
            for i in range(len(tasks[i]["tasks for the week"])):
                msg += f"{tasks[message.chat.id]['tasks for the week'][i]}\n"
            self.bot_.send_message(i, msg, reply_markup = markup_start)

        
    def —Åall_alert(self):
        """–≤—ã–∑–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        #—Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å alert –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
        sched = BackgroundScheduler()
        sched.add_job(self.alert, 'interval', seconds = 604800)#604800 —Å–µ–∫—É–Ω–¥ - –Ω–µ–¥–µ–ª—è
        sched.start()


    def del_task(self, message):
        """—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"""
        #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ—Ä–æ–±–∫–∏
        for i in tasks[message.chat.id]:
            #–≤ –∫–æ—Ä–æ–±–∫–∞—Ö –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏
            for j in range(len(tasks[message.chat.id][i])):
                #–µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞—á–∞–Ω–∞–µ—Ç—Å—è —Å –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ —É–¥–∞–ª—è—ë–º –µ—ë
                if message.text in tasks[message.chat.id][i][j]:
                    self.bot_.send_message(message.chat.id, f"–£–¥–∞–ª–µ–Ω–∞: {tasks[message.chat.id][i][j]}", reply_markup = markup_tasks)
                    tasks[message.chat.id][i].pop(j)
                    return
        #–∏–Ω–∞—á–µ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        self.bot_.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {message.text}", reply_markup = markup_tasks)


    def add_task_step_one(self, message):
        """–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —á–∞—Å—Ç—å 1"""
        try:
            #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ tasks
            tasks[message.chat.id]["save"] = dict_from_markap_to_key_task[message.text]
            print(tasks[message.chat.id]["save"])
            #–ø–µ—Ä–µ–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
            self.bot_.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É:', reply_markup = markup_key_tasks)
            self.bot_.register_next_step_handler(message, self.add_task_step_two)
        except:
            #–µ—â—ë —Ä–∞–∑ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ—Ä–æ–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
            self.bot_.send_message(message.chat.id, text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É', reply_markup = markup_key_tasks)
            self.bot_.register_next_step_handler(message, self.add_task_step_one)

        
    def add_task_step_two(self, message):
        """–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —á–∞—Å—Ç—å 2"""
        try:
            #–¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–µ–Ω–∏–∏
            tasks[message.chat.id][tasks[message.chat.id]["save"]].append(message.text)
            self.bot_.send_message(message.chat.id, text = "–î–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á—É", reply_markup = markup_tasks)
        except:
            #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            self.bot_.send_message(message.chat.id, text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞((((", reply_markup = markup_tasks)


    def replace_task_step_one(self, message):
        """–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É —á–∞—Å—Ç—å 1"""
        #—Å–æ—Ö—Ä–∞–Ω—è–µ–º, —Ç–æ –∫—É–¥–∞ –º—ã —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É
        try:
            tasks[message.chat.id]["save"] = dict_from_markap_to_key_task[message.text]
            self.bot_.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–¥–∞—á–∏:')
            self.bot_.register_next_step_handler(message, self.replace_task_step_two)
        except:
            self.bot_.send_message(message.chat.id, text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å:', reply_markup = markup_key_tasks)
            self.bot_.register_next_step_handler(message, self.replace_task_step_one)

            
    def replace_task_step_two(self, message):
        """–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É —á–∞—Å—Ç—å 2"""
        #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ—Ä–æ–±–∫–∏
        for i in tasks[message.chat.id]:
            #–≤ –∫–æ—Ä–æ–±–∫–∞—Ö –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏
            for j in range(len(tasks[message.chat.id][i])):
                #–µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞—á–∞–Ω–∞–µ—Ç—Å—è —Å –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –∫–æ—Ä–æ–±–∫—É
                if message.text in tasks[message.chat.id][i][j]:
                    try:
                        #–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                        tasks[message.chat.id][tasks[message.chat.id]["save"]].append(tasks[message.chat.id][i][j])
                        tasks[message.chat.id][i].pop(j)
                        #—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ 
                        self.bot_.send_message(message.chat.id, f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–∞: {tasks[message.chat.id][i][j]}", reply_markup = markup_tasks)
                    except:
                        #—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
                        self.bot_.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞üò≠üò≠üò≠üò≠", reply_markup = markup_tasks)
                    return
        #–µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫—É—é –∑–∞–¥–∞—á—É
        self.bot_.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –Ω–µ  –Ω–∞–π–¥–µ–Ω–∞, –∞ –∑–Ω–∞—á–∏—Ç –∏ –Ω–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞üò≠üò≠üò≠üò≠", reply_markup = markup_tasks)


    def print_tasks(self, message):
        """–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ—Ä–æ–±–∫–µ"""
        #–µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á, —Ç–æ –æ—Ç–≤–µ—Ç–∏–º, —á—Ç–æ –∫–æ—Ä–æ–±–∫–∞ –ø—É—Å—Ç–∞—è
        if len(tasks[message.chat.id][dict_from_markap_to_key_task[message.text]]) == 0:
            self.bot_.send_message(message.chat.id, f"–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–¥–∞—á –≤ <<{message.text}>>", reply_markup = markup_start)
            return
        #–∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏–º –≤—Å–µ –∑–¥–∞—á–∏
        msg = "" 
        for i in range(len(tasks[message.chat.id][dict_from_markap_to_key_task[message.text]])):
            msg += f"{tasks[message.chat.id][dict_from_markap_to_key_task[message.text]][i]}\n\n"
        self.bot_.send_message(message.chat.id, msg, reply_markup = markup_start)


    def otv_na_sticker(self, message):
        """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä"""
        #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–µ–∫–µ—Ä 
        self.bot_.send_sticker(message.chat.id, sticker = ls_stickers[random.randint(0, len_ls_stickers)])
        
    #—Ü–∏–∫–ª gtd
    def draft_cycle_gtd(self, message, step):
        """–®–∞–±–ª–æ–Ω –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –∞ –ø–æ—Å–ª–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—ã–∑—ã–≤—ã–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–ø—Ä–æ—Å–∞(—Å–æ–æ–±—â–µ–Ω–∏–µ –î–∞/–ù–∞–∑–∞–¥) –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –∫–æ—Ä–æ–±–∫—É(—Å–æ–æ–±—â–µ–Ω–∏–µ –ù–µ—Ç)"""
        #—Å–ø–∏—Å–∫–∏, –Ω—É–∂–Ω—ã–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞ —à–∞–±–ª–æ–Ω–∞(–≤–º–µ—Å—Ç–æ 6 –≤—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —É –Ω–∞—Å 2)
        ls_questions = ['–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è?', '–†–µ—à–∞–µ–º–æ –∑–∞ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ?', '–ú–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —è?', '–¢—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?']
        ls_key_task = ["later", "projects", "TODO"]
        ls_func = [self.cycle_gtd_step_alt_one, self.cycle_gtd_step_two, self.cycle_gtd_step_three, self.cycle_gtd_step_four]
        if message.text == "–ù–µ—Ç":
            #–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø—Ä–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            self.bot_.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–æ–±–∫—É <<{dict_key_task_to_markap[ls_key_task[step]]}>>', reply_markup = markup_start)
            tasks[message.chat.id][ls_key_task[step]].append(tasks[message.chat.id]["save"])
        elif message.text == "–î–∞":
            #–∑–∞–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            self.bot_.send_message(message.chat.id, text=ls_questions[step + 1], reply_markup = markup_yes_no)
            self.bot_.register_next_step_handler(message, ls_func[step + 1])
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
            #–ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            self.bot_.send_message(message.chat.id, text = "–û–∫–µ–π", reply_markup = markup_start)
        elif message.text == "–ù–∞–∑–∞–¥":
            #–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –±—ã–ª –ø–µ—Ä–≤—ã–º
            if step >= 1:
                #–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                self.bot_.send_message(message.chat.id, text=ls_questions[step - 1], reply_markup = markup_yes_no)
                self.bot_.register_next_step_handler(message, ls_func[step - 1])
            else:
                #–Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
                self.bot_.send_message(message.chat.id, text = "–û–∫–µ–π", reply_markup = markup_start)
        else:
            self.bot_.register_next_step_handler(message, ls_func[step])

    
    def cycle_gtd_step_one(self, message):
        """—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –∑–∞–¥–∞—á—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è(—Å–æ—Ö—Ä–∞–Ω–∏—è–µ—Ç –µ–≥–æ –≤ tasks) –∏ –æ–∂–∏–¥–∞—é—â–∞—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
        tasks[message.chat.id]["save"] = message.text
        #–≤—ã–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–ø—Ä–æ—Å–∞
        self.bot_.send_message(message.chat.id, text='–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è?', reply_markup = markup_yes_no)
        self.bot_.register_next_step_handler(message, self.cycle_gtd_step_alt_one)

        
    def cycle_gtd_step_alt_one(self, message):
        """–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —à–∞–±–ª–æ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        self.draft_cycle_gtd(message, 0)

        
    def cycle_gtd_step_two(self, message):
        """–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —à–∞–±–ª–æ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        self.draft_cycle_gtd(message, 1)

        
    def cycle_gtd_step_three(self, message):
        """–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —à–∞–±–ª–æ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        self.draft_cycle_gtd(message, 2)

        
    def cycle_gtd_step_four(self, message):
        """–ø—Ä–∏–Ω–∏–º–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –∞ –ø–æ—Å–ª–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é..."""
        if message.text == "–ù–µ—Ç":
            self.bot_.send_message(message.chat.id, text = "–î–µ–ª–µ–≥–∏—Ä—É–π", reply_markup = markup_start)
        elif message.text == "–î–∞":
            self.bot_.send_message(message.chat.id, text = '–ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?', reply_markup = markup_yes_no)
            self.bot_.register_next_step_handler(message, self.cycle_gtd_step_five)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
            self.bot_.send_message(message.chat.id, text = "–û–∫–µ–π", reply_markup = markup_start)
        elif message.text == "–ù–∞–∑–∞–¥":
            self.bot_.send_message(message.chat.id, text = '–ú–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —è?', reply_markup = markup_yes_no)
            self.bot_.register_next_step_handler(message, self.cycle_gtd_step_three)
        else:
            self.bot_.register_next_step_handler(message, self.cycle_gtd_step_four)

        
    def cycle_gtd_step_five(self, message):
        """–ø—Ä–∏–Ω–∏–º–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –∞ –ø–æ—Å–ª–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é..."""
        if message.text == "–ù–µ—Ç":
            key_task = "tasks for the week"
            tasks[message.chat.id][key_task].append(tasks[message.chat.id]["save"])
            self.bot_.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–æ–±–∫—É <<{dict_key_task_to_markap[key_task]}>>', reply_markup = markup_start)
        elif message.text == "–î–∞":
            key_task = "tasks for the day"
            tasks[message.chat.id][key_task].append(tasks[message.chat.id]["save"])
            self.bot_.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–æ–±–∫—É <<{dict_key_task_to_markap[key_task]}>>', reply_markup = markup_start)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
            self.bot_.send_message(message.chat.id, text = "–û–∫–µ–π", reply_markup = markup_start)
        elif message.text == "–ù–∞–∑–∞–¥":
            self.bot_.send_message(message.chat.id, text = '–¢—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?', reply_markup = markup_yes_no)
            self.bot_.register_next_step_handler(message, self.cycle_gtd_step_four)
        else:
            self.bot_.register_next_step_handler(message, self.cycle_gtd_step_five)








          


      




